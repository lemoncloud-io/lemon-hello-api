{
    "name": "lemon-hello-api",
    "version": "2.1.4",
    "description": "Basic Serverless Hello API with `Lambda` + `API Gateway` + `Web Socket` + `SNS` + `SQS` + `KMS`",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "port": 8888,
    "scripts": {
        "!build": "------ build /src to /dist ----",
        "build": "npm run build-ts",
        "build-ts": "tsc",
        "watch-ts": "tsc -w",
        "!start": "------ run in local development (note! ts-node seems not watch '.js' file) ----",
        "*start": "nodemon --watch src --exec ts-node --compiler typescript -r tsconfig-paths/register src/index.ts",
        "start": "npm run build && concurrently -k -p \"[{name}]\" -n \"TypeScript,Node\" -c \"cyan.bold,green.bold\" \"npm run watch-ts\" \"nodemon\"",
        "!server": "----- local에서 serverless로 실행하기 (개발용) -----",
        "server": "sls offline start --profile \"$ENV\" --stage local",
        "server-local": "npm run build && concurrently -k -p \"[{name}]\" -n \"TypeScript,Node\" -c \"cyan.bold,green.bold\" \"npm run watch-ts\" \"npm run server\"",
        "server.lemon": "ENV=lemon npm run server-local",
        "server.jober": "ENV=jober npm run server-local",
        "server.ssocio": "ENV=ssocio npm run server-local",
        "server.kong": "ENV=kong npm run server-local",
        "server.comics": "ENV=comics npm run server-local",
        "server.adam": "ENV=adam npm run server-local",
        "!express": "---- 로컬/개발 서버에서 express로 안정적으로 돌리기 위함 -----",
        "express.lemon": "ENV=lemon STAGE=local npm run start",
        "express.jober": "ENV=jober STAGE=local npm run start",
        "express.ssocio": "ENV=ssocio STAGE=local npm run start",
        "express.kong": "ENV=kong STAGE=local npm run start",
        "express.comics": "ENV=comics STAGE=local npm run start",
        "express.adam": "ENV=adam STAGE=local npm run start",
        "!deploy": "-----  빌드후 dist 폴더에 압축한 다음, serverless를 통해서 deploy 실행 -----",
        "deploy.lemon": "npm run build && sls deploy --profile lemon --stage prod",
        "deploy.jober": "npm run build && sls deploy --profile jober --stage prod",
        "deploy.ssocio": "npm run build && sls deploy --profile ssocio --stage prod",
        "deploy.kong": "npm run build && sls deploy --profile kong --stage prod",
        "deploy.comics": "npm run build && sls deploy --profile comics --stage prod",
        "deploy.adam": "npm run build && sls deploy --profile adam --stage prod",
        "!info": "------- print sls infor by profile -----",
        "info": "sls info --stage prod",
        "info.lemon": "sls info --profile lemon --stage prod",
        "!pack": "------- gulp 빌드후 dist 폴더에 압축한 다음, serverless를 통해서 deploy 실행 -----",
        "pack.lemon": "npm run build && sls package --profile lemon --stage prod",
        "!logs": "------- print logs of serverless by profile -----",
        "logs": "sls logs --stage prod -t --startTime 5m -f hello",
        "logs.lemon": "sls logs --profile lemon --stage prod -t --startTime 5m -f hello",
        "!remove": "----- sls remove by profile -----",
        "remove": "sls remove --stage prod",
        "remove.lemon": "sls remove --profile lemon --stage prod",
        "!test": "------- run self-test with jest -----",
        "test": "LS=1 jest --config=jest.config.json",
        "test.lemon": "ENV=lemon STAGE=local npm test",
        "!release": "---- release with standard -----",
        "release": "standard-version",
        "release.first": "npm run release --first-release",
        "release.minor": "npm run release --release-as minor",
        "!plato": "----- analysis code complexity -----",
        "plato": "plato -r -d complexity dist"
    },
    "dependencies": {
        "aws-sdk": "^2.640.0",
        "https": "^1.0.0",
        "lemon-core": "^2.1.14",
        "source-map-support": "^0.5.16",
        "url": "^0.11.0"
    },
    "devDependencies": {
        "@cruglobal/serverless-merge-config": "^1.1.0",
        "@types/cors": "^2.8.6",
        "@types/dotenv": "^6.1.1",
        "@types/jest": "^24.9.1",
        "@types/supertest": "^2.0.7",
        "@typescript-eslint/eslint-plugin": "^1.7.0",
        "@typescript-eslint/parser": "^1.7.0",
        "codecov": "^3.6.5",
        "concurrently": "^5.1.0",
        "eslint": "^5.16.0",
        "eslint-config-prettier": "^6.10.0",
        "eslint-plugin-prettier": "^3.1.2",
        "husky": "^2.2.0",
        "jest": "^24.9.0",
        "lint-staged": "^8.1.6",
        "nodemon": "^1.19.4",
        "prettier": "^1.19.1",
        "serverless-aws-documentation": "^0.8.0",
        "serverless-offline": "^3.33.0",
        "serverless-pseudo-parameters": "^2.5.0",
        "standard-version": "^6.0.1",
        "superagent": "^5.2.2",
        "supertest": "^4.0.2",
        "ts-jest": "^24.3.0",
        "ts-node": "8.1.0",
        "tsconfig-paths": "3.8.0",
        "tslint": "5.16.0",
        "typedoc": "^0.15.8",
        "typescript": "^3.8.3"
    },
    "private": false,
    "author": "Steve Jung <steve@lemoncloud.io> (https://lemoncloud.io)",
    "license": "MIT",
    "files": [
        "handler.js",
        "dist/**/*"
    ],
    "engines": {
        "node": ">=10.8.0"
    },
    "keywords": [
        "lemoncloud",
        "serverless",
        "lemon-core"
    ],
    "bugs": {
        "url": "https://github.com/lemoncloud-io/lemon-hello-api/issues",
        "email": "steve@lemoncloud.io"
    },
    "contributors": [
        "Louis <louis@lemoncloud.io>"
    ],
    "homepage": "https://github.com/lemoncloud-io/lemon-hello-api#readme",
    "repository": {
        "type": "git",
        "url": "git@github.com:lemoncloud-io/lemon-hello-api.git"
    }
}
